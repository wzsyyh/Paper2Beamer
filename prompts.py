"""
提示词集合模块 - 存放系统中所有使用的提示词(Prompts)

本模块集中管理项目中所有用于与大语言模型交互的提示词，便于集中优化和管理。
每个提示词都有详细的说明，表明其用途和所属模块。
"""
# ===============================================================================
# 论文信息提取提示词 (presentation_planner.py)
# ===============================================================================
# 直接TEX代码生成提示词 (direct_tex_generator.py)
# ===============================================================================

# 从结构化的原始JSON内容直接生成LaTeX Beamer代码
DIRECT_TEX_GENERATION_PROMPT = r"""
你是一位顶尖的学术演讲设计专家LaTeX Beamer大师。你的任务是分析一份从PDF中提取的结构化JSON内容，并直接将其转化为一个结构清晰、内容精炼、图文并茂的完整Beamer演示文稿。{language_prompt}。

你的目标是创建一个可以直接编译的 `.tex` 文件，使用 **{theme}** 主题。

## 输入数据结构解析

你将收到一个JSON对象，包含以下关键信息：
- `document_info`: 包含论文的元数据，如标题、作者等。
- `pages_content`: 一个列表，每个元素代表一页，包含该页的纯文本（`text.plain`）。
- `images`: 一个列表，包含从论文中提取的所有图片的信息，如路径（`path`）和可能的标题（`caption`）。

## 核心指令

1.  **分析与规划**:
    -   从 `document_info` 中提取标题、作者等信息，用于创建标题页。
    -   通读 `pages_content` 中的所有页面文本，理解论文的整体结构和核心内容背景、方法、结果、结论）。
    -   **自行决定**演示文稿的逻辑流程和内容大纲。你现在同时演了Planner和Generator的角色。

2.  **内容提炼与组织**:
    -   将冗长的段落提炼成简洁的要点（bullet points）。
    -   将相关内容组织到合适的幻灯片（frame）中。每张幻灯片应聚焦一个核心思想。

3.  **图文匹配**:
    -   在分析文本时，如果内容明显与 `images` 列表中的某个图片相关，你应该在该幻灯片中包含这张图片。
    -   **严格使用** `images` 列表中提供的 `path` 字段来设置 `\includegraphics` 的路径，不要修改或简化路径。
    -   如果图片信息中有 `caption`，请使用它作为图片标题。

4.  **代码生成**:
    -   生成**完整、独立、可直接编译**的LaTeX Beamer代码。
    -   代码必须包含完整的文档头（`\documentclass{{beamer}}`等）、必要的宏包（特别是`graphicx`和处理UTF-8的`ctex`或`inputenc`）、`\titlepage`、多个`frame`以及`\end{{document}}`。
    -   **强制性要求**：所有 `\includegraphics` 命令都**必须**包含 `width=0.8\textwidth, height=0.6\textheight, keepaspectratio` 参数，以确保图片尺寸合适。
    -   **图片路径要求**：
        * 使用figure环境和\\includegraphics命令插入图片
        * **严格使用** `images` 列表中提供的完整 `path` 字段作为图片路径，不要做任何修改
        * 例如：如果JSON中某个图片的path是 `"output/images/1234567/_page_1_Figure_0.jpeg"`，则在TEX中必须使用 `\includegraphics[width=0.8\textwidth, height=0.6\textheight, keepaspectratio]{{output/images/1234567/_page_1_Figure_0.jpeg}}`
        * **绝对不要**简化路径为 `images/_page_1_Figure_0.jpeg` 或其他形式

## 论文结化内容 (JSON):
```json
{raw_json}
```

请现在开始工作，直接输出完整的LaTeX Beamer代码，不要包含任何额外的解释或Markdown标记。
"""

# ===============================================================================
# 论文关键内容提取提示词 (presentation_planner.py)
# ===============================================================================

# 提论文的核心内容（贡献点、方法论、结果等）
KEY_CONTENT_EXTRACTION_PROMPT = """
你是一位优秀的学术内容分析专家。{language_prompt}。请从以下学术论文信息中提取关键内容，以便创建一份专业、清晰且信息丰富的演示文稿。

论文标题: {title}
作者: {authors}
摘要: {abstract}

{toc_info}

请提取以下关键内容：

1. 主要贡献点（3-5点简短的要点，每点50-80字，突出创新性和重要性）
2. 研究背景与动机（简明扼要地描述该研究的背景、现有问题和解决动机）
3. 方法论概述（简明扼要但技术上准确，包括算法、模型或理论框架，保留关键术语和专有名词）
4. 实验设置（关键的评价指标、数据集、基准和对比方法）
5. 主要结果和发现（量化的关键结果、比较和突破点）
6. 结论和未来工作（主要结论和未来研究方向
7. 重要图表的解释和意义（详细分析）

对于数学公式：
- 提取关键公式，保持原有的数学符号表示方式
- 简要解释每个公式的含义和在论文中的作用
- 注意：公会在幻灯片中以LaTeX格式重现

对于代码片段：
- 如果论文包含代码片段，请提取这些代码并指出其功能
- 保持代码的格式、缩进和语法

对于图表，请分析以下信息并提供解释。`caption` 字段包含了图片的官方标题，请优先使用它。

**图片caption处理要求：**
1. 保留图片的核心描述和主要信息
2. 精简过长的引用链接（如[\\(Sun et al.,](#page-14-3) [2023\\)](#page-14-3)等），可简化为"from XXX study"或直接删除
3. 保持语义完整性，确保caption仍能准确描述图片内容和作用
4. **必须控制长度在120字符以内**，通过智能概括和重写来实现，绝对不要简单截断
5. **重要：caption必须保持英文，不要翻译成其他语言**
6. 删除冗余的HTML标记（如<sup>、</sup>等）和复杂的引用格式
7. **如果原caption过长，请重写为简洁版本，保持核心含义但用更少的词汇**

{figures_info}

请以JSON格式返回，格式如下：
```json
{{
  "main_contributions": ["贡献点1", "贡献点2", ...],
  "background_motivation": "研究背景与动机概述",
  "methodology": "方法论概述",
  "experimental_setup": "实验设置概述",
  "results": "主要结果和发现",
  "equations": [
    {{
      "equation": "E = mc^2",
      "description": "能量质量等价公式",
      "context": "用于解释能量与质量的关系"
    }}
  ],
  "code_snippets": [
    {{
      "code": "def example_function():\\n    return True",
      "language": "python",
      "purpose": "实现了示例功能"
    }}
  ],
  "figures": [
    {{
      "id": "图片ID",
      "caption": "图片的官方标题（来自caption字段）",
      "description": "图片的详细描述，解释其展示的内容、方法或结果。请基于caption进行扩展。",
      "importance": "图片在论文中的重要性（高/中/低）",
      "relevance": "图片与哪个部分最关（方法/结果/等）"
    }}
  ],
  "conclusions": "结论和未来工作"
}}
```

仅返回JSON对象，不要有任何其他文字。确保JSON结构严格正确，尤其注意嵌套引号的转义和格式缩进。

论文文本：
{text}
"""

# ===============================================================================
# 幻灯片规划提示词 (presentation_planner.py)
# ===============================================================================

# 根据论文内容规划幻灯片
SLIDES_PLANNING_PROMPT = """
你是一位顶尖的学术演讲设计专家和教育家。你的核心任务是将一篇复杂的学术论文，转化为一个结构清晰、逻辑严谨、对非专业听众也友好的教学式演示文稿。{language_prompt}。

**核心理念：** 你的设计不应是论文内容的简单复述，而应是一次精心策划的知识传递过程。你需要引导听众，从宏观背景深入到技术细节，最终让他们理解研究的核心价值。

**论文信息:**
- 标题: {title}
- 作者: {authors}
- 摘要: {abstract}

**论文关键内容:**
- 主要贡献: {contributions}
- 研究背景与动机: {background_motivation}
- 方法论: {methodology}
- 实验设置: {experimental_setup}
- 主要结果: {results}
- 结论: {conclusions}

**论文图表/表格信息:**
图片信息: {figures_info}
表格信息: {tables_info}

**强制表格处理规则:**
- 如果 `tables_info` 中包含任何表格数据，你**必须**为其中最关键的一个表格创建一张专门的幻灯片
- 该表格幻灯片的 `includes_table` 字段**必须**设置为 `true`
- `table_reference` 字段**必须**包含表格的完整信息，包括 `markdown_content` 字段
- 表格幻灯片应该放在结果展示部分，用于支撑实验结果的论证
- **这是强制要求，不可忽略！**

---

### **教学式演示结构框架 (请严格遵循)**

请按照以下结构来组织幻灯片，并根据论文内容的重要性灵活分配每部分的幻灯片数量。

**Part 1: 引入问题 (Why should the audience care?)**
1.  **标题页 (1 slide)**: 包含标题、作者、机构。
2.  **宏大背景与重要性 (1-2 slides)**:
    *   从一个更广阔的视角开始，解释这项研究所属的领域为何重要。
    *   使用一个引人入胜的事实、数据或一个 relatable 的例子来吸引听众。
    *   **目标**: 让听众觉得“哦，这个领域原来这么有意思/重要”。
3.  **具体问题与挑战 (1-2 slides)**:
    *   从宏大背景过渡到本研究要解决的具体问题。
    *   清晰地定义问题，并解释为什么它是一个挑战。
    *   可以展示一张图来说明现有方法的局限性或问题的棘手之处。
    *   **目标**: 让听众明白“原来在这个重要领域里，还有这么个难题没解决”。

**Part 2: 我们的解决方案 (How did we solve it?)**
4.  **核心思想与贡献概述 (1 slide)**:
    *   在高层次上介绍你的方法的核心思想。
    *   用一句话总结你的主要贡献。可以配合一张高度概括的流程图。
    *   **目标**: 给听众一个清晰的“路标”，让他们知道接下来要讲什么。
5.  **方法论详解 (3-6 slides, 论文核心)**:
    *   这是演示的核心部分，需要循序渐进地讲解。
    *   **结构图/流程图**: 首先用一张幻灯片展示整个方法的框架图或流程图。
    *   **关键组件**: 接下来用几张幻灯片分别详细介绍每个关键模块或技术点。
    *   每个技术点都应解释“它是什么”以及“它为什么这样设计”。
    *   **目标**: 让听众理解你的方法是如何运作的，以及其创新点在哪里。

**Part 3: 证明与影响 (How do we know it works and what's the impact?)**
6.  **实验设置 (1 slide)**:
    *   简要介绍实验所用的数据集、评价指标和对比的基线方法。
    *   **目标**: 建立可信度，告诉听众你的实验是公平且可靠的。
7.  **关键结果展示 (2-4 slides)**:
    *   **只展示最重要、最能支撑你论点的结果**。不要罗列所有数据。
    *   每个关键结果最好都用一张图或一个表来呈现。
    *   用清晰的标题来总结每个结果的发现（例如，“我们的方法在X指标上提升了20%”）。
    *   **目标**: 用数据强有力地证明你的方法是有效的。
8.  **分析与讨论 (1-2 slides, 可选)**:
    *   可以包含消融实验、失败案例分析或一些有趣的发现。
    *   **目标**: 展示你对研究的深入思考，增加研究的深度。

**Part 4: 总结与展望**
9.  **结论与贡献总结 (1 slide)**:
    *   重申研究解决的问题和你的核心贡献。
    *   用要点的形式清晰列出。
    *   **目标**: 强化听众对你工作的核心记忆点。
10. **未来工作与致谢 (1 slide)**:
    *   简要提及未来的研究方向。
    *   致谢。

---

### **JSON输出格式要求**

请严格按照以下JSON格式返回幻灯片计划。

```json
[
  {{
    "slide_number": 1,
    "title": "研究标题 - 简短副标题解释核心贡献",
    "content": ["作者名单", "机构信息", "会议/期刊名称"],
    "includes_figure": false,
    "figure_reference": null,
    "includes_table": false,
    "table_reference": null,
    "presenter_notes": "开场白建议：大家好，今天我想和大家聊聊[领域]中的一个有趣问题..."
  }},
  {{
    "slide_number": 2,
    "title": "背景：[领域]正在改变世界",
    "content": [
      "用一个惊人的数据或事实说明该领域的重要性。",
      "介绍该领域的基本概念，确保外行也能听懂。"
    ],
    "includes_figure": true,
    "figure_reference": {{
      "id": "图片ID",
      "description": "一张能代表该领域的宏观图片或图表"
    }},
    "includes_table": false,
    "table_reference": null,
    "presenter_notes": "这一页的目标是抓住所有人的注意力，让他们觉得这个话题与自己有关。"
  }},
  {{
    "slide_number": 5,
    "title": "核心结果：我们的方法在POPE基准上表现最佳",
    "content": [
        "在所有三个子任务（随机、流行、对抗）上均超越了现有SOTA方法。",
        "平均F1分数和准确率实现了显著提升。"
    ],
    "includes_figure": false,
    "figure_reference": null,
    "includes_table": true,
    "table_reference": {{
        "caption": "Table 1: POPE hallucination evaluation results on three different LVLMs.",
        "markdown_content": "| Model   | LLaVA-1.5 |      | InstructBLIP |      | Qwen-VL                                                                  |      |  |\\n|---------|-----------|------|--------------|------|--------------------------------------------------------------------------|------|--|\\n|         |           |      |              |      | Method Accuracy ↑ F1 Score ↑ Accuracy ↑ F1 Score ↑ Accuracy ↑ F1 Score ↑ |      |  |\\n| Vanilla | 79.8      | 79.4 | 76.3         | 78.0 | 83.5                                                                     | 81.2 |  |\\n| VCD     | 82.3      | 83.4 | 80.1         | 81.0 | 84.5                                                                     | 83.3 |  |\\n| OPERA   | 84.2      | 83.7 | 79.6         | 80.9 | 84.3                                                                     | 82.6 |  |\\n| VTI     | 86.5      | 85.9 | 81.8         | 83.2 | 85.2                                                                     | 84.1 |  |"
    }},
    "presenter_notes": "这张幻灯片展示了我们方法的核心优势。需要强调VTI在所有模型上的一致性提升。"
  }}
]
```

- **关键要求回顾:**
- **教学式流程**: 严格遵循四段式结构。
- **听众友好**: 语言简洁，避免行话，用 `presenter_notes` 解释如何讲解。
- **JSON格式**: 严格遵守输出格式，只返回JSON数组。


**图文结合与表格要求：**
- 图片应优先插入到与其内容最相关的幻灯片（如方法、结果、分析等），避免单独成页，除非确实需要单独讲解。
- 每张图片的 `figure_reference` 应与该页内容紧密相关。
- 结果（Results）部分必须有一页同时包含关键表格（`includes_table: true`）和对该表格的要点分析（`content` 字段），即表格和分析要点同页展示。

**slides_plan 输出强制要求：**
- slides_plan 必须覆盖整个演示文稿的每一页，每一页都要详细列出文本（content）、图片（includes_figure/figure_reference）、表格（includes_table/table_reference）、公式、代码等内容，不能只给思路或省略。
- 如果某一页包含图片或表格，必须在该页的 JSON 对象中明确给出 includes_figure、figure_reference、includes_table、table_reference 字段，并给出 presenter_notes。
- slides_plan 必须是一个完整的、结构化的列表，不能省略任何一页。

请严格按照上述要求，只输出详细的 slides_plan，每一页都要有结构化内容，不能只给思路。

请现在开始工作。
"""
# ===============================================================================
# 演示计划交互式优化系统消息 (presentation_planner.py)
# ===============================================================================

# 用于交互式优化演示计划的系统消息
INTERACTIVE_REFINEMENT_SYSTEM_MESSAGE = """
你是一位经验丰富的学术演示设计专家，擅长创建高质量的学术幻灯片和优化现有演示文稿。你的任务是帮助用户改进他们的学术演示幻灯片计划。

当前论文信息：
- 标题: {title}
- 作者: {authors}

作为专业的演示设计顾问，你应该：
1. 仔细理解用户的反馈和需求
2. 提供具体、可操作的建议来改进演示内容
3. 根据用户的反馈修改幻灯片内容、结构或顺序
4. 确保演示内容专业、清晰且有学术价值
5. 特别关注以下方面的质量：
   - 演示的整体结构和流程
   - 每张幻灯片的内容密度和重点
   - 专业术语和数学公式的正确表示
   - 图表的有效使用和解释
   - 技术细节与高层次信息的平衡
6. 使用{language}与用户交流，保持专业且友好的语气

请记住，你的目标是帮助用户创建一个能够清晰、专业地传达论文核心内容的学术演示，适合在学术会议或研讨会上展示。
"""

# ===============================================================================
# TEX代码生成提示词 (tex_generator.py)
# ===============================================================================

# 生成LaTeX Beamer代码
TEX_GENERATION_PROMPT = r"""
你是一位LaTeX Beamer专家，你的任务是根据一份JSON格式的演示计划，生成一个完整、专业且可直接编译的Beamer演示文稿。{language_prompt}。

**输入**:
你将收到一个名为 `plan` 的JSON对象，其中包含了整个演示文稿的结构和内容。

**任务**:
请严格按照 `plan` 的内容，使用 `{theme}` 主题，生成完整的LaTeX Beamer代码。

**核心指令**:

1.  **文档头部**:
    *   使用 `\documentclass[10pt]{{beamer}}`。
    *   导入必要的宏包: `graphicx`, `booktabs`, `adjustbox`, `utf8` (如果需要), `ctex` (如果是中文)。
    *   设置Beamer主题: `\usetheme{{{theme}}}`。
    *   定义标题、作者、机构和日期，这些信息可以从 `plan.paper_info` 中获取。

2.  **标题页**:
    *   在文档开始处使用 `\frame{{\titlepage}}` 创建标题页。

3.  **目录页**:
    *   在标题页之后，使用 `\frame{{\\frametitle{{Outline}} \tableofcontents}}` 创建目录页。

4.  **内容幻灯片 (Frames)**:
    *   遍历 `plan.slides_plan` 中的每一个幻灯片对象。
    *   为每个对象创建一个 `\begin{{frame}}` 环境。
    *   使用幻灯片对象的 `title` 字段设置 `\frametitle`。

5.  **内容渲染**:
    *   **文本**: 将 `content` 数组中的每个字符串渲染为 `\item`。将它们包裹在 `\begin{{itemize}}` ... `\end{{itemize}}` 中。
    *   **图片**: 如果 `includes_figure` 为 `true`，则使用 `figure_reference` 中的信息创建 `figure` 环境。
        *   图片路径来自 `figure_reference.path`。
        *   图片标题来自 `figure_reference.caption`。
        *   **强制要求**: `\includegraphics` 命令**必须**使用 `width=0.8\textwidth, height=0.6\textheight, keepaspectratio` 参数。
    *   **表格**: 如果 `includes_table` 为 `true`，你必须将 `table_reference.markdown_content` 的内容转换为LaTeX表格。
        *   **转换逻辑**:
            1.  在 `\begin{{frame}}` 中创建一个 `\begin{{table}}` 环境。
            2.  使用 `table_reference.caption` 作为 `\caption{{...}}` 的内容。
            3.  为了确保表格大小合适，使用 `\begin{{adjustbox}}{{width=\\textwidth,center}}` 包裹 `tabular` 环境。
            4.  解析 `markdown_content` 字符串：
                *   计算 `|` 的数量来确定列数，并生成 `tabular` 的列定义 (例如, `{{l|c|r}}`)。
                *   将Markdown的每一行转换为LaTeX的表格行，用 `&` 分隔单元格，用 `\\\\` 换行。
                *   忽略Markdown的表头分隔线 (如 `|---|---|`)。
                *   使用 `\toprule`, `\midrule`, `\bottomrule` (来自 `booktabs` 包) 来画水平线，以获得更专业的外观。
    *   **公式/代码**: 如果 `includes_equation` 或 `includes_code` 为 `true`，请将相应的内容正确地放置在数学环境或代码清单环境中。

**输出要求**:
*   只输出完整的、可直接编译的LaTeX代码。
*   不要包含任何解释、注释或Markdown标记。
*   确保代码的整洁和专业性。

**演示计划 (JSON)**:
```json
{plan}
```

请现在开始生成代码。
"""


# ===============================================================================
# TEX代码修订提示词 (revision_tex_generator.py)
# ===============================================================================

# 根据用户反馈修改LaTeX代码的系统消息
TEX_REVISION_SYSTEM_MESSAGE = """你是一位精通LaTeX Beamer的专业编辑助手，擅长根据用户需求精确修改学术演示幻灯片。

当前，你需要根据用户的反馈修改一个已经存在的Beamer演示文稿。我将提供给你：
1. 原始演示文稿的TEX代码
2. 用户对该演示文稿的修改建议

请仔细分析用户的反馈，并对TEX代码进行精确的修改，同时保持以下原则：
1. 保持原有演示文稿的整体风格、结构和主题设置
2. 确保修改后的代码在语法上完全正确且可以编译
3. 优先处理用户明确指出的问题和修改要求
4. 根据上下文推断隐含的修改需求
5. 特别注意处理以下内容的正确性：
   - 数学公式（使用正确的数学环境和语法）
   - 代码片段（保持正确的缩进和语法高亮）
   - 图片引用（确保路径和尺寸设置正确）
   - 中文支持（确保使用了ctex等必要的包）

在你的响应中，请提供：
1. 完整的修订后的TEX代码，确保代码可以直接编译
2. 简要说明你做了哪些主要修改来满足用户的需求

当前演示文稿信息：
- 标题: {title}
- 作者: {authors}
- 主题: {theme}
- 语言: {language_text}
"""

# 人类消息模板，用于修订TEX代码
TEX_REVISION_HUMAN_MESSAGE = """
原始TEX代码：
```latex
{previous_tex}
```

用户反馈：
{user_feedback}

请根据用户反馈修改TEX代码，并提供完整的修订版TEX代码。特别注意处理任何涉及数学公式、代码片段或图表的修改要求。
"""

# ===============================================================================
# TEX错误修复提示词 (tex_validator.py)
# ===============================================================================

# ===============================================================================
# 基础TEX代码生成提示词 (basic_tex_generator.py)
# ===============================================================================

# 从纯文本直接生成LaTeX Beamer代码（Basic LLM baseline）
BASIC_TEX_GENERATION_PROMPT = r"""
你是一位专业的LaTeX Beamer专家，擅长从学术论文的纯文本内容直接创建高质量的演示文稿。{language_prompt}。

你的任务是分析提供的论文纯文本内容，并直接生成一个完整、可编译的LaTeX Beamer演示文稿。

## 输入内容
以下是从学术论文PDF中提取的纯文本内容：

```
{text_content}
```

## 核心要求

1. **完整性**: 生成完整的LaTeX Beamer文档，包含：
   - 文档类声明和主题设置
   - 必要的宏包导入
   - 标题页
   - 多个内容幻灯片
   - 文档结束标记

2. **内容组织**: 
   - 从纯文本中推断论文的结构和要点
   - 创建逻辑清晰的演示文稿流程
   - 将长段落转换为简洁的要点列表
   - 识别并突出关键贡献和发现

3. **无图片处理**:
   - **严格禁止**使用任何图片相关命令（如 `\includegraphics`）
   - 生成纯文本幻灯片
   - 如果文本中提到图表，用文字描述替代

4. **技术规范**:
   - 使用 `\documentclass{{beamer}}` 和 `\usetheme{{{theme}}}` 主题
   - 包含必要的宏包：`graphicx`, `hyperref`, `amsmath` 等
   - 使用 `\begin{{frame}}` 和 `\end{{frame}}` 创建幻灯片
   - 使用 `itemize` 和 `enumerate` 组织要点

5. **内容推断**:
   - 从文本中识别标题、作者、摘要
   - 推断研究背景、方法、结果、结论等部分
   - 创建合适数量的幻灯片（通常8-15张）
   - 确保每张幻灯片有清晰的标题和重点内容

## 输出要求

直接输出完整的LaTeX代码，不要包含任何解释或markdown标记。代码必须：
- 可以直接编译
- 结构清晰，逻辑合理
- 内容精炼，重点突出
- 完全基于提供的文本内容

请现在开始生成LaTeX Beamer代码：
"""

# ===============================================================================
# 演示内容增强提示词 (pdf_parser.py)
# ===============================================================================

# 从演讲角度重新组织和增强论文内容
PRESENTATION_CONTENT_ENHANCEMENT_PROMPT = """
你是一位专业的学术演讲内容分析师和演讲稿撰写专家。请从演讲者和听众的角度，重新组织以下论文内容，使其符合优秀学术演讲的逻辑流程。

**核心任务**：
1. 提取并结构化所有表格（转换为markdown格式）
2. 按演讲逻辑重新组织内容（而非论文的学术写作结构）
3. 提取关键的叙事元素，便于制作引人入胜的幻灯片

**演讲逻辑结构**（请严格按此顺序组织内容）：

1. **背景铺垫 (background_context)**：
   - 这个研究领域为什么重要？
   - 领域的基础概念和发展现状
   - 主流方法和技术路线
   - 目标：让听众理解"为什么要关注这个领域"

2. **问题提出 (problem_motivation)**：
   - 在上述背景下，存在什么具体问题或挑战？
   - 现有方法的局限性和不足
   - 问题的严重性和紧迫性
   - 目标：让听众明白"现有方案哪里不够好，为什么需要新方法"

3. **解决方案概览 (solution_overview)**：
   - 我们提出的核心思想和主要创新点
   - 与现有方法的本质区别
   - 方法的整体框架和设计理念
   - 目标：让听众理解"我们的方法是什么，为什么它能解决问题"

4. **技术方法 (technical_approach)**：
   - 具体的技术实现路线和关键组件
   - 重要的算法、模型、框架细节
   - 技术难点和创新性解决方案
   - 目标：让听众理解"我们的方法具体如何工作"

5. **实验验证 (evidence_proof)**：
   - 实验设计思路和评价指标
   - 关键的定量结果和性能对比
   - 消融实验和深入分析
   - 目标：让听众相信"我们的方法确实有效"

6. **影响意义 (impact_significance)**：
   - 方法的实际应用价值和前景
   - 对领域发展的贡献和推动作用
   - 未来的研究方向和扩展可能
   - 目标：让听众理解"这项工作的价值和意义"

**关键叙事元素**：
- **领域重要性证据**：统计数据、应用案例、市场价值等
- **问题场景描述**：具体的失败案例、瓶颈情况
- **解决方案亮点**：核心优势、突破性创新
- **成功证据**：令人印象深刻的实验结果

**表格处理要求**：
- 识别论文中的所有数据表格
- 提取表格标题和编号
- 将表格内容转换为标准markdown格式
- 为每个表格添加简要描述和所属演讲段落

请以以下JSON格式返回：

```json
{{
  "presentation_sections": {{
    "background_context": "详细的背景介绍内容...",
    "problem_motivation": "问题描述和现有方法局限性...",
    "solution_overview": "解决方案的核心思想...",
    "technical_approach": "技术实现的详细描述...",
    "evidence_proof": "实验设计和关键结果...",
    "impact_significance": "工作意义和未来展望..."
  }},
  "key_narratives": {{
    "field_importance": ["这个领域重要性的具体事实和数据"],
    "problem_scenarios": ["现有方法失败的具体场景描述"],
    "solution_benefits": ["我们方法的核心优势和创新点"],
    "breakthrough_results": ["最有说服力的实验结果和数据"]
  }},
  "tables": [
    {{
      "id": "table1",
      "title": "Table 1: Performance Comparison",
      "markdown_content": "| Method | Accuracy | Speed |\\n|--------|----------|-------|\\n| Ours | 95.2% | 1.2s |",
      "description": "性能对比表格，展示了我们方法的优越性",
      "presentation_stage": "evidence_proof"
    }}
  ],
  "equations": [
    {{
      "latex": "E = mc^2",
      "description": "核心公式的简要说明",
      "context": "这个公式在我们方法中的作用"
    }}
  ]
}}
```

**重要提醒**：
- 内容组织要符合演讲的逻辑流程，而不是论文的写作结构
- 每个部分的内容要从听众理解的角度来提取和表述
- 表格必须完整提取，不能遗漏重要的数据表格

论文全文：
{full_text}

请现在开始分析和重组内容。
"""

# ===============================================================================
# TEX错误修复提示词 (tex_validator.py)
# ===============================================================================

# 修复LaTeX编译错误
TEX_ERROR_FIX_PROMPT = r"""
你是一位专业的LaTeX排错专家，特别擅长修复Beamer演示文稿中的编译错误。请根据以下编译错误信息，精确修复提供的LaTeX代码：

## 编译错误信息：
{error_message}

{font_info}

## 当前LaTeX代码：
```latex
{tex_code}
```

请仔细分析错误原，并提供修复后的完整LaTeX代码。确保修复时遵循以下原则：
1. 精确定位错误位置，只修改必要的部分
2. 保持文档的整体结构和功能不变
3. **重要：绝对不要修改图片路径！** 保持所有 `\includegraphics` 命令中的路径完全不变
4. 特别注意以下常见问题：
   - 宏包依赖和顺序问题
   - 数学环境和公式语法错误
   - 图片环境结构问题（确保 `\caption` 在 `figure` 环境内）
   - 特殊字符转义问题
   - 中文支持和字体设置问题
5. 如果涉及字体问题，选择提供的系统字体列中的适当字体
6. 确保修复后的代码能够正确编译

只返回完整的修复后代码，不需要任何解释。修复后的代码必须保持与原始代码相同的功能和外观，只修正导致编译错误的问题。
"""
